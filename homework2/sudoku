from typing import List, Tuple, Optional, Set
from random import randint


def read_sudoku(filename: str) -> List[List[str]]:
    """ Прочитать Судоку из указанного файла """
    with open(filename) as f:
        content = f.read()
    digits = [c for c in content if c in '123456789.']
    grid = group(digits, 9)
    return grid


def group(values: List[str], n: int) -> List[List[str]]:
    """
    Сгруппировать значения values в список, состоящий из списков по n элементов
    >>> group([1,2,3,4], 2)
    [[1, 2], [3, 4]]
    >>> group([1,2,3,4,5,6,7,8,9], 3)
    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    """
    return [values[i:i + n] for i in range(0, len(values), n)]


def display(grid: List[List[str]]) -> None:
    width = 2
    line = '+'.join(['-' * (width * 3)] * 3)
    for row in range(9):
        print(''.join(grid[row][col].center(width) + ('|' if str(col) in '25' else '') for col in range(9)))
        if str(row) in '25':
            print(line)
    print()


def get_row(grid: List[List[str]], pos: Tuple[int, int]) -> List[str]:
    """ Возвращает все значения для номера строки, указанной в pos

    >>> get_row([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']], (0, 0))
    ['1', '2', '.']
    >>> get_row([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']], (1, 0))
    ['4', '.', '6']
    >>> get_row([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']], (2, 0))
    ['.', '8', '9']
    """
    row_index, _ = pos
    return grid[row_index]


def get_col(grid: List[List[str]], pos: Tuple[int, int]) -> List[str]:
    """ Р’РѕР·РІСЂР°С‰Р°РµС‚ РІСЃРµ Р·РЅР°С‡РµРЅРёСЏ РґР»СЏ РЅРѕРјРµСЂР° СЃС‚РѕР»Р±С†Р°, СѓРєР°Р·Р°РЅРЅРѕРіРѕ РІ pos

    >>> get_col([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']], (0, 0))
    ['1', '4', '7']
    >>> get_col([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']], (0, 1))
    ['2', '.', '8']
    >>> get_col([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']], (0, 2))
    ['3', '6', '9']
    """
    _, column_index = pos
    result = []
    for row_index in range(len(grid)):
        result.append(grid[row_index][column_index])
    return result


def get_block(grid: List[List[str]], pos: Tuple[int, int]) -> List[str]:
    """ Возвращает все значения для номера столбца, указанного в pos
    >>> grid = read_sudoku('puzzle1.txt')
    >>> get_block(grid, (0, 1))
    ['5', '3', '.', '6', '.', '.', '.', '9', '8']
    >>> get_block(grid, (4, 7))
    ['.', '.', '3', '.', '.', '1', '.', '.', '6']
    >>> get_block(grid, (8, 8))
    ['2', '8', '.', '.', '.', '5', '.', '7', '9']
    """
    row, column = pos
    block_row = 3 * (row // 3)
    block_column = 3 * (column // 3)
    result = []
    for i in range(3):
        for y in range(3):
            result.append(grid[block_row + i][block_column + y])
    return result


def find_empty_positions(grid: List[List[str]]) -> Optional[Tuple[int, int]]:
    """ Возвращает все значения из квадрата, в который попадает позиция pos

    >>> find_empty_positions([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']])
    (0, 2)
    >>> find_empty_positions([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']])
    (1, 1)
    >>> find_empty_positions([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']])
    (2, 0)
    """
    for i in range(len(grid)):
        for y in range(len(grid)):
            if grid[i][y] == '.':
                return (i, y)
    return None


def find_possible_values(grid: List[List[str]], pos: Tuple[int, int]) -> Set[str]:
    """ Вернуть множество всех возможных значения для указанной позиции
    >>> grid = read_sudoku('puzzles/puzzle1.txt')
    >>> values = find_possible_values(grid, (0,2))
    >>> set(values) == {'1', '2', '4'}
    True
    >>> values = find_possible_values(grid, (4,7))
    >>> set(values) == {'2', '5', '9'}
    True
    """
    numbers = set('123456789')
    numbers -= set(get_block(grid, pos))
    numbers -= set(get_row(grid, pos))
    numbers -= set(get_col(grid, pos))
    return numbers


def solve(grid: List[List[str]]) -> Optional[List[List[str]]]:
    """ Решение пазла, заданного в grid
        Как решать Судоку?
        1. Найти свободную позицию
        2. Найти все возможные значения, которые могут находиться на этой позиции
        3. Для каждого возможного значения:
            3.1. Поместить это значение на эту позицию
            3.2. Продолжить решать оставшуюся часть пазла
    >>> grid = read_sudoku('puzzle1.txt')
    >>> solve(grid)
    [['5', '3', '4', '6', '7', '8', '9', '1', '2'], ['6', '7', '2', '1', '9', '5', '3', '4', '8'], ['1', '9', '8', '3', '4', '2', '5', '6', '7'], ['8', '5', '9', '7', '6', '1', '4', '2', '3'], ['4', '2', '6', '8', '5', '3', '7', '9', '1'], ['7', '1', '3', '9', '2', '4', '8', '5', '6'], ['9', '6', '1', '5', '3', '7', '2', '8', '4'], ['2', '8', '7', '4', '1', '9', '6', '3', '5'], ['3', '4', '5', '2', '8', '6', '1', '7', '9']]
    """
    pos = find_empty_positions(grid)
    if pos is not None:
        row, column = pos
        for value in find_possible_values(grid, pos):
            grid[row][column] = value
            solution = solve(grid)

            if solution is not None:
                return grid
            grid[row][column] = "."
    else:
        return grid

    return None


def check_solution(solution: List[List[str]]) -> bool:
    """ Если решение solution верно, то вернуть True, в противном случае False """
    for i in range(9):
        row = set(get_row(solution, (i, 0)))
        column = set(get_col(solution, (0, i)))

        if len(row) < 9 or "." in row:
            return False
        if len(column) < 9 or "." in column:
            return False

    for i in range(3):
        for y in range(3):
            block = set(get_block(solution, (i + 3, y + 3)))
            if len(block) < 9 or "." in block:
                return False

    return True


def generate_sudoku(N: int) -> List[List[str]]:
    """ Генерация судоку заполненного на N элементов
    >>> grid = generate_sudoku(40)
    >>> sum(1 for row in grid for e in row if e == '.')
    41
    >>> solution = solve(grid)
    >>> check_solution(solution)
    True
    >>> grid = generate_sudoku(1000)
    >>> sum(1 for row in grid for e in row if e == '.')
    0
    >>> solution = solve(grid)
    >>> check_solution(solution)
    True
    >>> grid = generate_sudoku(0)
    >>> sum(1 for row in grid for e in row if e == '.')
    81
    >>> solution = solve(grid)
    >>> check_solution(solution)
    True
    """
    # PUT YOUR CODE HERE
    grid = []
    for i in range(9):
        row = ['.' for y in range(9)]
        grid.append(row)
    grid = solve(grid)

    if N >= 81:
        N = 81
    elif N <= 0:
        N = 0
    else:
        N = N

    for i in range(81 - N):
        row_pos = randint(0, 8)
        column_pos = randint(0, 8)
        while grid[row_pos][column_pos] is ".":
            row_pos = randint(0, 8)
            column_pos = randint(0, 8)
        grid[row_pos][column_pos] = "."

    return grid


if __name__ == "__main__":
    grid = read_sudoku("puzzle.txt")
    solve(grid)
    display(grid)
    print("==============================")
    print("Generated sudoku with 10 losses")
    display(generate_sudoku(10))
