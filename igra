import pygame
from pygame.locals import *
from typing import List
from random import randint
from pprint import pprint

class GameOfLife:

    def __init__(self, width: int=640, height: int=480, cell_size: int=10, speed: int=10) -> None:
        self.width = width
        self.height = height
        self.cell_size = cell_size

        # Устанавливаем размер окна
        self.screen_size = width, height
        # Создание нового окна
        self.screen = pygame.display.set_mode(self.screen_size)

        # Вычисляем количество ячеек по вертикали и горизонтали
        self.cell_width = self.width // self.cell_size
        self.cell_height = self.height // self.cell_size

        # Скорость протекания игры
        self.speed = speed

    def draw_lines(self) -> None:
        # @see: http://www.pygame.org/docs/ref/draw.html#pygame.draw.line
        for x in range(0, self.width, self.cell_size):
            pygame.draw.line(self.screen, pygame.Color('black'),
                (x, 0), (x, self.height))
        for y in range(0, self.height, self.cell_size):
            pygame.draw.line(self.screen, pygame.Color('black'),
                (0, y), (self.width, y))

    def run(self) -> None:
        pygame.init()
        clock = pygame.time.Clock()
        pygame.display.set_caption('Game of Life')
        self.screen.fill(pygame.Color('white'))
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == QUIT:
                    running = False
            self.draw_lines()
            game.draw_grid()
            pygame.display.flip()
            clock.tick(self.speed)
        pygame.quit()


    def create_grid(self, randomize: bool = False) -> List[List[str]]:
        """
        Создание списка клеток.

        Клетка считается живой, если ее значение равно 1, в противном случае клетка
        считается мертвой, то есть, ее значение равно 0.

        Parameters
        ----------
        randomize : bool
            Если значение истина, то создается матрица, где каждая клетка может
            быть равновероятно живой или мертвой, иначе все клетки создаются мертвыми.

        Returns
        ----------
        out : Grid
            Матрица клеток размером `cell_height` х `cell_width`.
        """
        grid = []
        if randomize:
            for i in range(self.cell_height):
                grid.append([randint(0,1) for j in range(self.cell_width)])
        else:
            for i in range(self.cell_height):
                grid.append([0 for j in range(self.cell_width)])
        return grid

    def draw_grid(self) -> None:
        """
        Отрисовка списка клеток с закрашиванием их в соответствующе цвета.
        """
        grid = self.create_grid(True)
        pprint(grid)
        for i in range(len(grid)):
            for elem in grid[i]:
                if elem == 1:
                    pygame.draw.rect(self.screen, pygame.Color("green"), (grid[i].index(elem)*self.cell_size,
                                                                         grid[i].index(elem)*self.cell_size,
                                                                         self.cell_size,
                                                                         self.cell_size))
                else:
                    pygame.draw.rect(self.screen, pygame.Color("white"), (grid[i].index(elem)*self.cell_size,
                                                                         grid[i].index(elem)*self.cell_size,
                                                                         self.cell_size,
                                                                         self.cell_size))

    def get_neighbours(self, cell_row, cell_column):
        """ Вернуть список соседей для указанной ячейки
        :param cell: Позиция ячейки в сетке, задается кортежем вида (row, col)
        :return: Одномерный список ячеек, смежных к ячейке cell
        """
        neighbours = []
        for row in range(3):
            for col in range(3):
                cur_row, cur_col = cell_row - 1 + row, cell_column - 1 + col

                if (
                        (cur_row, cur_col) != (cell_row, cell_column) and
                        cur_row >= 0 and cur_col >= 0 and
                        cur_col < self.cols and
                        cur_row < self.rows
                ):
                    neighbours.append((cell_row - 1 + row, cell_column - 1 + col))
        return neighbours

if __name__ == '__main__':
    game = GameOfLife(320, 240, 40)
    game.run()

